{"remainingRequest":"/home/oem/Downloads/senior-java-spring-web-master/src/main/javascript/iq/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/oem/Downloads/senior-java-spring-web-master/src/main/javascript/iq/src/components/ImageList.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/oem/Downloads/senior-java-spring-web-master/src/main/javascript/iq/src/components/ImageList.vue","mtime":1573242146000},{"path":"/home/oem/Downloads/senior-java-spring-web-master/src/main/javascript/iq/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/oem/Downloads/senior-java-spring-web-master/src/main/javascript/iq/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/oem/Downloads/senior-java-spring-web-master/src/main/javascript/iq/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n  import {FetchHttpService, HttpService} from '@/services/http-service';\n\n  export interface ImageMeta {\n\t  id: string;\n\t  name: string;\n\t  mimeType: string;\n\t  size: number;\n\t  digitalSign: string;\n  }\n\n\t @Component\n\texport default class ImageList extends Vue {\n\t\t\n\t  private httpService: HttpService;\n    private images: ImageMeta[] = [];\n\t  \n\t  constructor() {\n\t  \tsuper();\n\t  \t\n\t\t  this.httpService = new FetchHttpService();\n\t  }\n\n\t  public async refresh() {\n\t    const images = await this.loadData();\n\t    images.sort(function(a: ImageMeta, b: ImageMeta) {\n\t\t    return a.id.localeCompare(b.id);\n\t    });\n\n\t    this.images = images;\n\t  }\n\n\t  public beforeDestroy() {\n        this.images = [];\n\t\t}\n\n\t  protected async mounted() {\n        this.refresh();\n\t\t}\n\t\t\n\t\tprivate async loadData(): Promise<ImageMeta[]> {\n\t  \treturn await this.httpService.get('/api/images/meta');\n    }\n\t}\n",{"version":3,"sources":["ImageList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ImageList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  \n  <div>\n  \n    <table class=\"table\">\n      <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Id</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Mime type</th>\n        <th scope=\"col\">Sign</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"image in images\">\n        <th scope=\"row\">\n          <img :src=\"'/api/images/preview/' + image.id\" :alt=\"image.name\" height=\"50px\">\n        </th>\n        <td>{{image.id}}</td>\n        <td>{{image.name}}</td>\n        <td>{{image.mimeType}}</td>\n        <td><textarea cols=\"50\" rows=\"7\" readonly>{{image.digitalSign}}</textarea></td>\n      </tr>\n      </tbody>\n    </table>\n    \n    \n  </div>\n  \n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n  import {FetchHttpService, HttpService} from '@/services/http-service';\n\n  export interface ImageMeta {\n\t  id: string;\n\t  name: string;\n\t  mimeType: string;\n\t  size: number;\n\t  digitalSign: string;\n  }\n\n\t @Component\n\texport default class ImageList extends Vue {\n\t\t\n\t  private httpService: HttpService;\n    private images: ImageMeta[] = [];\n\t  \n\t  constructor() {\n\t  \tsuper();\n\t  \t\n\t\t  this.httpService = new FetchHttpService();\n\t  }\n\n\t  public async refresh() {\n\t    const images = await this.loadData();\n\t    images.sort(function(a: ImageMeta, b: ImageMeta) {\n\t\t    return a.id.localeCompare(b.id);\n\t    });\n\n\t    this.images = images;\n\t  }\n\n\t  public beforeDestroy() {\n        this.images = [];\n\t\t}\n\n\t  protected async mounted() {\n        this.refresh();\n\t\t}\n\t\t\n\t\tprivate async loadData(): Promise<ImageMeta[]> {\n\t  \treturn await this.httpService.get('/api/images/meta');\n    }\n\t}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style  lang=\"scss\">\n  \n  @function str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n    \n    @if $index {\n      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n    \n    @return $string;\n  }\n  \n  @function data-uri-escape($str) {\n    $str: str-replace($str, \"%\", \"%25\");\n    $str: str-replace($str, \">\", \"%3E\");\n    $str: str-replace($str, \"<\", \"%3C\");\n    $str: str-replace($str, \"#\", \"%23\");\n    $str: str-replace($str, '\"', \"%22\");\n    @return $str;\n  }\n  \n  \n  @function data-svg-uri($str) {\n    @return \"data:image/svg+xml,\" + data-uri-escape($str);\n  }\n  \n  @function svg-icon-upload($color, $color2) {\n    @return url(data-svg-uri('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"#{$color}\" d=\"M22,13v5H2V13H1v6a1,1,0,0,0,1,1H22a1,1,0,0,0,1-1V13Z\"/><path fill=\"#{$color2}\" d=\"M17.39,9.19,11.84,4.1A.41.41,0,0,0,11.53,4h-.06a.41.41,0,0,0-.3.09L5.61,9.19a.43.43,0,0,0,.08.64.53.53,0,0,0,.69.07L11,5.67V14.5a.5.5,0,0,0,1,0V5.66L16.62,9.9a.53.53,0,0,0,.69-.07A.43.43,0,0,0,17.39,9.19Z\"/></svg>'));\n  }\n  \n  \n  $iconHeight: 40px;\n  $iconWidth: 70px;\n  $trd-green: #68CEA2;\n  $sec-dark-gray: #555;\n  $light-blue: #378caf;\n  \n  .uploader-dropzone {\n    overflow: hidden;\n    position: relative;\n    text-align: center;\n    height: 100px;\n    &::before {\n      content: \"\";\n      display: block;\n      height: 50%;\n      padding-bottom: $iconHeight / 2;\n    }\n    .uploader-dropzone-label {\n      margin: 0 10px 10px 10px;\n    }\n    .file-selector {\n      cursor: pointer;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      z-index: 3;\n      &.file-selector-drag-over {\n        background-color: rgba($trd-green, 0.5);\n      }\n      form {\n        cursor: pointer;\n        position: absolute;\n        z-index: 1;\n        opacity: 0;\n        display: none;\n        input {\n          cursor: pointer;\n        }\n      }\n    }\n  }\n  \n  .uploader-icon {\n    position: absolute;\n    z-index: 0;\n    left: 50%;\n    top: 50%;\n    margin-left: -$iconWidth/2;\n    margin-top: -$iconHeight/2;\n    height: $iconHeight;\n    &::before {\n      display: block;\n      line-height: $iconHeight;\n      background-repeat: no-repeat;\n      background-position: center;\n      background-size: 24px;\n      background-image: svg-icon-upload($sec-dark-gray, $light-blue);\n      text-align: center;\n      content: '';\n      width: $iconWidth;\n      height: $iconHeight;\n      top: 50%;\n    }\n  }\n</style>\n"]}]}